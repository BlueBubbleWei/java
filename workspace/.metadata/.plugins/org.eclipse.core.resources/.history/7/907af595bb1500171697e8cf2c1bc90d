package cn.myframe.demo;

public class RegexTest {
	/**
	* @param args
	*/
	public static void main(String[] args) {
//		matchesDemo();
//		splitDemo();
		replaceDemo();
	}

	/**
	 * 
	 */
	private static void replaceDemo() {
		String temp="13127716930";
		temp=temp.replaceAll("(\\d{3})\\d{4}(\\d{4})", "$1****$2");// $可以在多参数时，后面的参数可以通过￥编号的形式取到前一个参数的组
//		System.out.println(temp);
		
		String strs="qw##%%refefkffrrr";
		strs=strs.replaceAll("(.)\\1+","&" );//所有的叠词替换成&
		System.out.println(strs);
	}

	/**
	 * 
	 */
	private static void splitDemo() {
		String temp="小王八   ，  李四  wewe   dddd ";
		String regex=" +";//包含1-n个空格一起切
		
		
		String netadd="www.baidu.com";
		String net="\\.";
		
		String vo="saadiioshddhsssss";
		String resvo="(.)\\1+";//为了实现规则的复用，用（）将需要复用的规则封装，就称为正则表达式中的组。每一个组都有一个编号，从1开始
//		通过使用编号就可以复用对应组的规则内容。注意：编号必须用到组的后面】
//		也就是说：先封装完再调用
		
		String[] names=temp.split(regex);
		for(String name:names){
//			System.out.println(name+"--");
		}
		String[] strs=netadd.split(net);
		for(String str:strs){
//			System.out.println(str);
		}
		
		String[] vos=vo.split(resvo);
		for(String v:vos){
			System.out.println(v);
		}
		
	}

	/**
	 * 
	 */
	private static void matchesDemo() {
		//需求：校验手机号码是否正确
		String tel="13255538615";
		String regex="1[32456789][0-9]{9}";
		boolean b=tel.matches(regex);
		System.out.println(tel+"\t"+b);
	}
}
